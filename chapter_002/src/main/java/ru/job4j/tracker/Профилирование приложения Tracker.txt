Профилирование приложения[#210849]
==================================================================
	Вопросы:
1.	Используя различные утилиты для анализа памяти виртуальной машины провести анализ работы программы из второго модуля. Программа заявок.
2.	Данные анализа описать в текстовом файле и добавить в репозиторий. В файле нужно указать, каким инструментом проведен анализ и что по нему видно.
3.	Попробовать добиться состояния выхода за пределы памяти и посмотреть состояние виртуальной машины.
==================================================================
	Объяснения информации заключено в блоки со звездочками:
	************************
	*
	*
	************************
==================================================================
	Ответы:
******************************************************************
* 
* пункты 1,2)
*	 При запуске программы Tracker из класса StartUI в настройках VM были использованы команды:
*	 -XX:+UseSerialGC -Xms256m -Xmx256m -Xlog:gc*::time -Xlog:gc:C:\projects\job4j\chapter_002\gcTracker.txt
*	
*   Так же в main методе был добавлен кусок кода для генерации 1_750_000 заявок.
*	
******************************************************************	
------------------------------------------------------------------

##### Информация из консоли благодаря настройкам VM #####

[2020-11-11T19:28:02.875+0300] Using Serial
[2020-11-11T19:28:02.875+0300] Heap address: 0x00000000f0000000, size: 256 MB, Compressed Oops mode: 32-bit
[2020-11-11T19:28:06.887+0300] GC(0) Pause Young (Allocation Failure)
[2020-11-11T19:28:07.190+0300] GC(0) DefNew: 69952K->8704K(78656K)
[2020-11-11T19:28:07.190+0300] GC(0) Tenured: 0K->50973K(174784K)
[2020-11-11T19:28:07.190+0300] GC(0) Metaspace: 1167K->1167K(1056768K)
[2020-11-11T19:28:07.191+0300] GC(0) Pause Young (Allocation Failure) 68M->58M(247M) 303.419ms
[2020-11-11T19:28:07.191+0300] GC(0) User=0.17s Sys=0.08s Real=0.30s
[2020-11-11T19:28:07.381+0300] GC(1) Pause Young (Allocation Failure)
[2020-11-11T19:28:07.744+0300] GC(1) DefNew: 78656K->8704K(78656K)
[2020-11-11T19:28:07.744+0300] GC(1) Tenured: 50973K->115623K(174784K)
[2020-11-11T19:28:07.744+0300] GC(1) Metaspace: 1168K->1168K(1056768K)
[2020-11-11T19:28:07.744+0300] GC(1) Pause Young (Allocation Failure) 126M->121M(247M) 363.083ms
[2020-11-11T19:28:07.744+0300] GC(1) User=0.28s Sys=0.06s Real=0.36s
[2020-11-11T19:28:07.905+0300] GC(2) Pause Young (Allocation Failure)
[2020-11-11T19:28:07.905+0300] GC(3) Pause Full (Allocation Failure)
[2020-11-11T19:28:07.905+0300] GC(3) Phase 1: Mark live objects
[2020-11-11T19:28:08.175+0300] GC(3) Phase 1: Mark live objects 270.645ms
[2020-11-11T19:28:08.176+0300] GC(3) Phase 2: Compute new object addresses
[2020-11-11T19:28:08.338+0300] GC(3) Phase 2: Compute new object addresses 161.851ms
[2020-11-11T19:28:08.338+0300] GC(3) Phase 3: Adjust pointers
[2020-11-11T19:28:08.536+0300] GC(3) Phase 3: Adjust pointers 197.669ms
[2020-11-11T19:28:08.536+0300] GC(3) Phase 4: Move objects
[2020-11-11T19:28:08.682+0300] GC(3) Phase 4: Move objects 145.891ms
[2020-11-11T19:28:08.682+0300] GC(3) Pause Full (Allocation Failure) 189M->185M(247M) 777.418ms
[2020-11-11T19:28:08.682+0300] GC(2) DefNew: 78656K->14721K(78656K)
[2020-11-11T19:28:08.682+0300] GC(2) Tenured: 115623K->174783K(174784K)
[2020-11-11T19:28:08.682+0300] GC(2) Metaspace: 1168K->1168K(1056768K)
[2020-11-11T19:28:08.682+0300] GC(2) Pause Young (Allocation Failure) 189M->185M(247M) 777.676ms
[2020-11-11T19:28:08.682+0300] GC(2) User=0.67s Sys=0.06s Real=0.78s
1750000
[2020-11-11T19:28:11.768+0300] GC(4) Pause Full (Allocation Failure)
[2020-11-11T19:28:11.768+0300] GC(4) Phase 1: Mark live objects
[2020-11-11T19:28:12.208+0300] GC(4) Phase 1: Mark live objects 440.233ms
[2020-11-11T19:28:12.208+0300] GC(4) Phase 2: Compute new object addresses
[2020-11-11T19:28:12.499+0300] GC(4) Phase 2: Compute new object addresses 291.087ms
[2020-11-11T19:28:12.499+0300] GC(4) Phase 3: Adjust pointers
[2020-11-11T19:28:12.786+0300] GC(4) Phase 3: Adjust pointers 286.949ms
[2020-11-11T19:28:12.786+0300] GC(4) Phase 4: Move objects
[2020-11-11T19:28:12.826+0300] GC(4) Phase 4: Move objects 39.169ms
[2020-11-11T19:28:12.826+0300] GC(4) DefNew: 74031K->66785K(78656K)
[2020-11-11T19:28:12.826+0300] GC(4) Tenured: 174783K->174783K(174784K)
[2020-11-11T19:28:12.826+0300] GC(4) Metaspace: 1169K->1169K(1056768K)
[2020-11-11T19:28:12.826+0300] GC(4) Pause Full (Allocation Failure) 242M->235M(247M) 1058.439ms
[2020-11-11T19:28:12.826+0300] GC(4) User=1.05s Sys=0.00s Real=1.06s
0
[2020-11-11T19:28:12.840+0300] GC(5) Pause Full (System.gc())
[2020-11-11T19:28:12.840+0300] GC(5) Phase 1: Mark live objects
[2020-11-11T19:28:13.300+0300] GC(5) Phase 1: Mark live objects 459.811ms
[2020-11-11T19:28:13.300+0300] GC(5) Phase 2: Compute new object addresses
[2020-11-11T19:28:13.550+0300] GC(5) Phase 2: Compute new object addresses 249.923ms
[2020-11-11T19:28:13.550+0300] GC(5) Phase 3: Adjust pointers
[2020-11-11T19:28:13.776+0300] GC(5) Phase 3: Adjust pointers 225.397ms
[2020-11-11T19:28:13.776+0300] GC(5) Phase 4: Move objects
[2020-11-11T19:28:13.776+0300] GC(5) Phase 4: Move objects 0.055ms
[2020-11-11T19:28:13.776+0300] GC(5) DefNew: 74941K->73621K(78656K)
[2020-11-11T19:28:13.776+0300] GC(5) Tenured: 174783K->174783K(174784K)
[2020-11-11T19:28:13.776+0300] GC(5) Metaspace: 1169K->1169K(1056768K)
[2020-11-11T19:28:13.776+0300] GC(5) Pause Full (System.gc()) 243M->242M(247M) 936.197ms
[2020-11-11T19:28:13.777+0300] GC(5) User=0.94s Sys=0.00s Real=0.94s

[2020-11-11T19:40:14.871+0300] Heap
[2020-11-11T19:40:14.871+0300]  def new generation   total 78656K, used 76634K [0x00000000f0000000, 0x00000000f5550000, 0x00000000f5550000)
[2020-11-11T19:40:14.871+0300]   eden space 69952K,  99% used [0x00000000f0000000, 0x00000000f4429a00, 0x00000000f4450000)
[2020-11-11T19:40:14.871+0300]   from space 8704K,  78% used [0x00000000f4450000, 0x00000000f4afcfd0, 0x00000000f4cd0000)
[2020-11-11T19:40:14.871+0300]   to   space 8704K,   0% used [0x00000000f4cd0000, 0x00000000f4cd0000, 0x00000000f5550000)
[2020-11-11T19:40:14.871+0300]  tenured generation   total 174784K, used 174783K [0x00000000f5550000, 0x0000000100000000, 0x0000000100000000)
[2020-11-11T19:40:14.871+0300]    the space 174784K,  99% used [0x00000000f5550000, 0x00000000fffffff0, 0x0000000100000000, 0x0000000100000000)
[2020-11-11T19:40:14.871+0300]  Metaspace       used 1553K, capacity 4803K, committed 4864K, reserved 1056768K
[2020-11-11T19:40:14.872+0300]   class space    used 149K, capacity 475K, committed 512K, reserved 1048576K

******************************************************************
*
* Видим, что GC вызвался 6 раз (0 - 5). 
* Eden заполнен на 99% и Tenured Generation на 99%
* Начиная с GC(3) вызывается Full очистка.
*
******************************************************************
------------------------------------------------------------------

##### Информация из лог файла указанного в настройках VM #####

[0.028s][info][gc] Using Serial
[4.343s][info][gc] GC(0) Pause Young (Allocation Failure) 68M->58M(247M) 303.419ms
[4.897s][info][gc] GC(1) Pause Young (Allocation Failure) 126M->121M(247M) 363.083ms
[5.835s][info][gc] GC(3) Pause Full (Allocation Failure) 189M->185M(247M) 777.418ms
[5.835s][info][gc] GC(2) Pause Young (Allocation Failure) 189M->185M(247M) 777.676ms
[9.979s][info][gc] GC(4) Pause Full (Allocation Failure) 242M->235M(247M) 1058.439ms
[10.929s][info][gc] GC(5) Pause Full (System.gc()) 243M->242M(247M) 936.197ms

******************************************************************
*
* В лог файле информация в отличие от информации в консоли сильно обрезена,
* но достаточна чтобы понять что есть проблемы с заполнением Eden и 
* Tenured Generation, т.к. во время GC(5) при Full очистке 
* Tenured Generation чистится не значительно 243M->242M при полном объеме (247M)
* 
******************************************************************
------------------------------------------------------------------

##### Информация при использовании утилиты jmap #####
#####      (вызывается в командной строке)      #####

C:\Windows\System32>jhsdb jmap --heap --pid 17604
Attaching to process ID 17604, please wait...
Debugger attached successfully.
Server compiler detected.
JVM version is 12.0.2+10

using thread-local object allocation.
Mark Sweep Compact GC

Heap Configuration:
   MinHeapFreeRatio         = 40
   MaxHeapFreeRatio         = 70
   MaxHeapSize              = 268435456 (256.0MB)
   NewSize                  = 89456640 (85.3125MB)
   MaxNewSize               = 89456640 (85.3125MB)
   OldSize                  = 178978816 (170.6875MB)
   NewRatio                 = 2
   SurvivorRatio            = 8
   MetaspaceSize            = 21807104 (20.796875MB)
   CompressedClassSpaceSize = 1073741824 (1024.0MB)
   MaxMetaspaceSize         = 17592186044415 MB
   G1HeapRegionSize         = 0 (0.0MB)

Heap Usage:
New Generation (Eden + 1 Survivor Space):
   capacity = 80543744 (76.8125MB)
   used     = 77040696 (73.47173309326172MB)
   free     = 3503048 (3.3407669067382812MB)
   95.6507509757679% used
Eden Space:
   capacity = 71630848 (68.3125MB)
   used     = 70040680 (66.7959976196289MB)
   free     = 1590168 (1.5165023803710938MB)
   97.78005141025274% used
From Space:
   capacity = 8912896 (8.5MB)
   used     = 7000016 (6.6757354736328125MB)
   free     = 1912880 (1.8242645263671875MB)
   78.53806439568015% used
To Space:
   capacity = 8912896 (8.5MB)
   used     = 0 (0.0MB)
   free     = 8912896 (8.5MB)
   0.0% used
tenured generation:
   capacity = 178978816 (170.6875MB)
   used     = 178978800 (170.68748474121094MB)
   free     = 16 (1.52587890625E-5MB)
   99.99999106039455% used
   
******************************************************************
*
* Видим, что используемый тип GC: using thread-local object allocation.
* Mark Sweep Compact GC (Это Serial GC)
* После генерации 1_750_000 заявок дело с heap обстоит так:
* Eden Space заполнен на 97.78005141025274%
* Tenured generation заполнен на 99.99999106039455%
* Так же указывается размер свободной памяти в мегабайтах.
* 
******************************************************************
------------------------------------------------------------------

##### Информация при использовании утилиты jstat (кусок) #####

C:\Windows\System32>jstat -gcutil -h25 19584 250 100>"C:\projects\job4j\chapter_002\gcStartUI.txt"

  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT    CGC    CGCT     GCT   
 78,54   0,00  97,78 100,00  24,05  20,16      3    0,666     3    2,772     -        -    3,438
 78,54   0,00  97,78 100,00  24,05  20,16      3    0,666     3    2,772     -        -    3,438
 78,54   0,00  97,78 100,00  24,05  20,16      3    0,666     3    2,772     -        -    3,438
 78,54   0,00  97,78 100,00  24,05  20,16      3    0,666     3    2,772     -        -    3,438
 78,54   0,00  97,78 100,00  24,05  20,16      3    0,666     3    2,772     -        -    3,438
 78,54   0,00  97,78 100,00  24,05  20,16      3    0,666     3    2,772     -        -    3,438
 78,54   0,00  97,78 100,00  24,05  20,16      3    0,666     3    2,772     -        -    3,438
 78,54   0,00  97,78 100,00  24,05  20,16      3    0,666     3    2,772     -        -    3,438
 78,54   0,00  97,78 100,00  24,05  20,16      3    0,666     3    2,772     -        -    3,438
 78,54   0,00  97,78 100,00  24,05  20,16      3    0,666     3    2,772     -        -    3,438
 78,54   0,00  97,78 100,00  24,05  20,16      3    0,666     3    2,772     -        -    3,438
 78,54   0,00  97,78 100,00  24,05  20,16      3    0,666     3    2,772     -        -    3,438
 78,54   0,00  97,78 100,00  24,05  20,16      3    0,666     3    2,772     -        -    3,438
 78,54   0,00  97,78 100,00  24,05  20,16      3    0,666     3    2,772     -        -    3,438
 78,54   0,00  97,78 100,00  24,05  20,16      3    0,666     3    2,772     -        -    3,438
 
******************************************************************
*
* Обратим внимание на некоторое данные.
* Данные в столбце << E >> говорят о заполнении Eden на 97,78%
* Данные в столбце << О >> говорят о заполнении Old (Tenured Generation) на 100,00%
* Данные в столбце << YGC >> говорят что было 3 чистки в Young Generation
* Данные в столбце << FGC >> говорят что было 3 Fulll чистки
* Данные в столбце << GCT >> говорят о времени полной чистки: 3,438
* 
******************************************************************
==================================================================
пункт 3) 
	При генерации 1_800_000 заявок было выброшено соощение о переполении памяти

.........
[2020-11-11T20:21:38.279+0300] GC(5) Pause Full (Allocation Failure)
[2020-11-11T20:21:38.280+0300] GC(5) Phase 1: Mark live objects
[2020-11-11T20:21:38.549+0300] GC(5) Phase 1: Mark live objects 269.618ms
[2020-11-11T20:21:38.549+0300] GC(5) Phase 2: Compute new object addresses
[2020-11-11T20:21:38.696+0300] GC(5) Phase 2: Compute new object addresses 147.070ms
[2020-11-11T20:21:38.696+0300] GC(5) Phase 3: Adjust pointers
[2020-11-11T20:21:38.914+0300] GC(5) Phase 3: Adjust pointers 217.596ms
[2020-11-11T20:21:38.914+0300] GC(5) Phase 4: Move objects
[2020-11-11T20:21:39.081+0300] GC(5) Phase 4: Move objects 166.799ms
[2020-11-11T20:21:39.081+0300] GC(5) DefNew: 73426K->73371K(78656K)
[2020-11-11T20:21:39.081+0300] GC(5) Tenured: 174784K->174783K(174784K)
[2020-11-11T20:21:39.081+0300] GC(5) Metaspace: 1169K->1169K(1056768K)
[2020-11-11T20:21:39.081+0300] GC(5) Pause Full (Allocation Failure) 242M->242M(247M) 801.686ms
[2020-11-11T20:21:39.081+0300] GC(5) User=0.78s Sys=0.00s Real=0.80s
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3721)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3690)
	at java.base/java.util.ArrayList.toArray(ArrayList.java:400)
	at java.base/java.util.ArrayList.<init>(ArrayList.java:179)
	at ru.job4j.tracker.start.Tracker.findAll(Tracker.java:120)
	at ru.job4j.tracker.start.StartUI.main(StartUI.java:113)
[2020-11-11T20:21:39.084+0300] Heap
[2020-11-11T20:21:39.085+0300]  def new generation   total 78656K, used 73383K [0x00000000f0000000, 0x00000000f5550000, 0x00000000f5550000)
[2020-11-11T20:21:39.085+0300]   eden space 69952K,  99% used [0x00000000f0000000, 0x00000000f444fff8, 0x00000000f4450000)
[2020-11-11T20:21:39.085+0300]   from space 8704K,  39% used [0x00000000f4450000, 0x00000000f47a9dd0, 0x00000000f4cd0000)
[2020-11-11T20:21:39.085+0300]   to   space 8704K,   0% used [0x00000000f4cd0000, 0x00000000f4cd0000, 0x00000000f5550000)
[2020-11-11T20:21:39.085+0300]  tenured generation   total 174784K, used 174783K [0x00000000f5550000, 0x0000000100000000, 0x0000000100000000)
[2020-11-11T20:21:39.085+0300]    the space 174784K,  99% used [0x00000000f5550000, 0x00000000ffffffe8, 0x0000000100000000, 0x0000000100000000)
[2020-11-11T20:21:39.085+0300]  Metaspace       used 1181K, capacity 4625K, committed 4864K, reserved 1056768K
[2020-11-11T20:21:39.085+0300]   class space    used 104K, capacity 412K, committed 512K, reserved 1048576K

Process finished with exit code 1
******************************************************************
*
* Видим что на вызове GC(5) у нас появилось соощение о переполении heap:
* Exception in thread "main" java.lang.OutOfMemoryError: Java heap space 
*
******************************************************************



