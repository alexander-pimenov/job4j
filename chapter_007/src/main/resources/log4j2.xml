<?xml version="1.0" encoding="UTF-8"?>
<!--В нашем приложении используем log4j.xml т.е. 1-ю версию,
поэтому log4j2.xml не будет читаться.-->
<Configuration status="info">
    <Appenders>
        <Console name="Console" target="SYSTEM_OUT">
            <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] [%-5level] %logger{36} - %msg%n"/>
        </Console>
        <File name="MyFileAppender"
              fileName="logging/testDownloadFile.txt"
              immediateFlush="false"
              append="true">
            <PatternLayout pattern="%d{yyy-MM-dd HH:mm:ss.SSS} [%t] [%-5level] %logger{36} - %msg%n"/>
        </File>
    </Appenders>
    <Loggers>
        <Logger name="ru.job4j" level="info" additivity="false">
            <AppenderRef ref="Console"/>
        </Logger>
        <Logger name="ru.job4j.log4j" level="info" additivity="false">
            <AppenderRef ref="MyFileAppender"/>
        </Logger>
        <Root level="error">
            <AppenderRef ref="Console"/>
        </Root>
    </Loggers>
</Configuration>
        <!--
        ### Формат записи.
        # В логах удобно получать информацию о времени выполнении,
        # классе и строчке кода, где была сделана запись.
        # %d{ISO8601} - дата в формате ISO8601.
        # %-5p - уровень сообщения, приоритет. 5 символов. Выравнивание влево.
        # %-t - имя потока. Выравнивание влево.
        # %c - категория. Класс.
        # %c:%M:%L - класс, метод, строчка.
        # %m%n - текс сообщения (%m - сообщение после, которого идет перенос строки %n).
        # [ ] - квадратные скобки улучшают читабельность.
        log4j.appender.console.layout=org.apache.log4j.PatternLayout
        log4j.appender.console.layout.ConversionPattern=%d{ISO8601} [%-5p] [%c:%M:%L] - %m%n
        #log4j.appender.console.layout.ConversionPattern=%d{ISO8601} [%-5p] [%-t] [%32.32c] %c:%M:%L - %m%n
        # Приоритетность: all, trace, debug, info, warn, error, fatal

        -->