package ru.job4j.pool.singleton;

/*
 * При реализации шаблона Singleton необходимо учитывать проблему с visibility (Видимость).
 * Эту проблему можно решать двумя способами используя volatile или сразу
 * публикуя объект через final.
 * Многопоточные реализации аналогичны не многопоточным.
 * Их можно разделить на две группы:
 * 1. энергичные
 * 2. ленивые
 *
 * Ленивые с помощью Double checked locking:
 *
 * Поле экземпляра обозначено volatile. Это обеспечит решение проблемы видимости,
 * после инициализации поля.
 * Первая проверка экземпляра идет до блока синхронизации, что позволяет улучить
 * скорость работы по сравнению с single checked locking реализацией.
 * В критической секции происходит инициализация экземпляра и запись его в
 * переменную.
 * Этот шаблон использовать не рекомендуется. Он уменьшает производительность
 * системы при многопроцессорном окружении !!!!
 *
 * Вывод.
 * Если у вас нет необходимости в ленивой загрузке, используются шаблоны из
 * первой группы. Например, инициализация кеша или базы данных.
 * Если в приложении есть затратные ресурсы нужно использовать шаблоны с
 * ленивой загрузкой.
 * Здесь можно использовать только один шаблон - это Holder. Другие шаблоны
 * будут отрицательно влиять на производительность системы.
 *
 * */
public class TrackerSingle4 {
    private static volatile TrackerSingle4 INSTANCE;

    private TrackerSingle4() {
    }

    public static TrackerSingle4 getInstance() {
        if (INSTANCE == null) {
            synchronized (TrackerSingle4.class) {
                if (INSTANCE == null) {
                    INSTANCE = new TrackerSingle4();
                }
            }
        }
        return INSTANCE;
    }

    public static void main(String[] args) {
        TrackerSingle4 tracker = TrackerSingle4.getInstance();
    }
}
