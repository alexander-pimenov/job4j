package ru.job4j.basepatterns.creational.singleton.singleton1;

/**
 * Есть программа и мы хотим, чтобы действия в этой программе логировались
 * Создаем примитивный логер
 * Смотрим, что нужно сделать, чтобы сделать этот ProgramLogger синглтоном
 * Данный пример подходит для однопоточной среды, но если другой поток пожелает
 * обратится, то чтобы избежать проблем сделаем метод getProgramLogger synchronized
 * И теперь, если второй поток захочет обратится к этому методу, то он будет
 * должен подождать, пока первый закончит работу с этим методом
 * Это классический шаблон и в многопоточной среде - это не будет работать корректно.
 */

public class ProgramLogger {

    //создаем экземпляр. объявляем переменную
    //Для того, чтобы хранить состояние класса, нам нужна ГЛОБАЛЬНАЯ переменная
    //(т.к. у локальных видимость только в пределах метода) и для того, чтобы к ней
    // можно было обращаться без создания экземпляра ProgramLogger(),
    //объявляем её static. Почему private ? чтобы сокрыть от других классов.
    private static ProgramLogger programLogger;

    //создадим строку, в которую будем записывать наши действия в нашей программе
    //обычно для этих целей используют файл
    private static String logFile = "This is log file. \n\n";//это изначальная надпись

    //нам нужен публичный статичный метод, к-рый будет возвращать нам ProgramLogger
    //метод, при вызове которого мы будем получать объект класса или создавать его, если он не создан (для этого проверка на null).
    //public - чтобы другие классы могли его вызвать
    public static synchronized ProgramLogger getProgramLogger() {
        if (programLogger == null) {
            programLogger = new ProgramLogger();
        }
        return programLogger;
    }

    //создаем приватный пустой конструктор
    // Для запрета создания объекта снаружи, мы объявляем констрктор приватным, теперь другие классы
    // не смогут создать новый объект через new ProgramLogger();
    private ProgramLogger() {

    }

    //создадим два метода

    //метод заносящий информацию в логфайл
    public void addLogInfo(String logInfo) {
        logFile += logInfo + "\n";
    }

    //метод отображающий наш логфайл, к-рый выводит нашу строку logFile
    public void showLogFile() {
        System.out.println(logFile);
    }
}
